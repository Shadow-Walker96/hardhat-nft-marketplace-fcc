/*

// 23:46:12 -----------------------> NftMarketplace.sol

// -------------------- Here is for "listItem"

/**
 * @notice Create a decentralized NFT Marketplace
 *
 * @dev First  --> 'listItem': List NFTs on the marketplace
 * Second --> 'buyItem': Buy the NFTs
 * Third --> 'cancelItem': Cancel a listing
 * Fourth --> 'updateListing': Update Price
 * fifth --> 'withdrawProceeds': Withdraw payment for my bought NFTs
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

error NftMarketplace__PriceMustBeAboveZero();
error NftMarketplace__NotApprovedForMarketplace();
error NftMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);
error Marketplace__NotOwner();

contract NftMarketplace {
    struct Listing {
        uint256 price;
        address seller;
    }

    event ItemListed(
        address indexed seller,
        address indexed nftAddress,
        uint256 indexed tokenId,
        uint256 price
    );

    // NFT Contract address --> NFT TokenId --> Listing
    mapping(address => mapping(uint256 => Listing)) private s_listings;

    //////////////////
    // Modifier //
    ///////////////
    // notListed --> To check if the nft has already been listed
    modifier notListed(
        address nftAddress,
        uint256 tokenId,
        address owner
    ) {
        Listing memory listing = s_listings[nftAddress][tokenId];
        if (listing.price > 0) {
            revert NftMarketplace__AlreadyListed(nftAddress, tokenId);
        }
        _;
    }

    //isOwner --> To check if the owner of the NFT is the one listing it
    modifier isOwner(
        address nftAddress,
        uint256 tokenId,
        address spender
    ) {
        IERC721 nft = IERC721(nftAddress);
        address owner = nft.ownerOf(tokenId);
        if (spender != owner) {
            revert Marketplace__NotOwner();
        }
        _;
    }

    // constructor() {}

    /////////////////////
    // Main Function //
    ////////////////////
    /*
     *@notice Method for listing your NFT on the marketplace
     *@param nftAddress: Address of NFT contract
     *@param tokenId: Token ID of NFT
     *@param price: sale price for each item
     *@dev Technically, we could have the contract be the escrow for the NFTs
     *but this way people can still hold their NFTs when listed.
     */
    function listItem(
        address nftAddress,
        uint256 tokenId,
        uint256 price
    ) 
        external
        notListed(nftAddress, tokenId, msg.sender)
        isOwner(nftAddress, tokenId, msg.sender)
    {
        if (price <= 0) {
            revert NftMarketplace__PriceMustBeAboveZero();
        }
        /**
         * @dev The listing can be in two ways
         * first --> Send the NFT to the contract. Transfer -> Contract "hold" the NFT,
         * now the first method is good, but it will cost lots of gas for transaction
         * second --> Owners can still hold their NFT, and give the marketplace approval to
         * sell the NFT for them.
         */
        IERC721 nft = IERC721(nftAddress);
        if (nft.getApproved(tokenId) != address(this)) {
            revert NftMarketplace__NotApprovedForMarketplace();
        }
        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);
        emit ItemListed(msg.sender, nftAddress, tokenId, price);

    }
}

*/

/*

/**
 * @notice Create a decentralized NFT Marketplace
 *
 * @dev First  --> 'listItem': List NFTs on the marketplace
 * Second --> 'buyItem': Buy the NFTs
 * Third --> 'cancelItem': Cancel a listing
 * Fourth --> 'updateListing': Update Price
 * fifth --> 'withdrawProceeds': Withdraw payment for my bought NFTs
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

error NftMarketplace__PriceMustBeAboveZero();
error NftMarketplace__NotApprovedForMarketplace();
error NftMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);
error Marketplace__NotOwner();
error Marketplace__NotListed(address nftAddress, uint256 tokenId);
error NftMarketplace__PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);

contract NftMarketplace {
    struct Listing {
        uint256 price;
        address seller;
    }

    event ItemListed(
        address indexed seller,
        address indexed nftAddress,
        uint256 indexed tokenId,
        uint256 price
    );
    event ItemBought(
        address indexed buyer,
        address indexed nftAddress,
        uint256 indexed tokenId,
        uint256 price
    );

    // NFT Contract address --> NFT TokenId --> Listing
    mapping(address => mapping(uint256 => Listing)) private s_listings;

    // Seller address --> Amount earned
    // We need to keep track of how much money this people have, how much money people has earned selling 
    // their NFTs
    mapping (address => uint256) private s_proceeds;

    //////////////////
    // Modifier //
    ///////////////
    // notListed --> To check if the nft has already been listed
    modifier notListed(
        address nftAddress,
        uint256 tokenId,
        address owner
    ) {
        Listing memory listing = s_listings[nftAddress][tokenId];
        if (listing.price > 0) {
            revert NftMarketplace__AlreadyListed(nftAddress, tokenId);
        }
        _;
    }

    //isOwner --> To check if the owner of the NFT is the one listing it
    modifier isOwner(
        address nftAddress,
        uint256 tokenId,
        address spender
    ) {
        IERC721 nft = IERC721(nftAddress);
        address owner = nft.ownerOf(tokenId);
        if (spender != owner) {
            revert Marketplace__NotOwner();
        }
        _;
    }
    // isListed --> To check if the item i.e NFT is listed
    modifier isListed(address nftAddress, uint256 tokenId) {
        Listing memory listing = s_listings[nftAddress][tokenId];
        if (listing.price <= 0) {
            revert Marketplace__NotListed(nftAddress, tokenId);
        }
        _;
    }

    // constructor() {}

    /////////////////////
    // Main Function //
    ////////////////////
    function listItem(
        address nftAddress,
        uint256 tokenId,
        uint256 price
    )
        external
        notListed(nftAddress, tokenId, msg.sender)
        isOwner(nftAddress, tokenId, msg.sender)
    {
        if (price <= 0) {
            revert NftMarketplace__PriceMustBeAboveZero();
        }
        IERC721 nft = IERC721(nftAddress);
        if (nft.getApproved(tokenId) != address(this)) {
            revert NftMarketplace__NotApprovedForMarketplace();
        }
        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);
        emit ItemListed(msg.sender, nftAddress, tokenId, price);
    }

    function buyItem(
        address nftAddress,
        uint256 tokenId
    ) external payable isListed(nftAddress, tokenId) {
        Listing memory listedItem = s_listings[nftAddress][tokenId];
        if (msg.value < listedItem.price) {
            revert NftMarketplace__PriceNotMet(nftAddress, tokenId, listedItem.price);
        }
        s_proceeds[listedItem.seller] = s_proceeds[listedItem.seller] + msg.value;
        delete (s_listings[nftAddress][tokenId]); // Here we delete the mapping 

        // 1--> sending the money to the user
        // or 2--> have them withdraw the money 
        // we would use no.2
        IERC721(nftAddress).safeTransferFrom(listedItem.seller, msg.sender, tokenId);
        emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);
    }
}


*/

/*

// 24:06:26 -----------------------> Reentrancy Attacks


/**
 * @notice Create a decentralized NFT Marketplace
 *
 * @dev First  --> 'listItem': List NFTs on the marketplace
 * Second --> 'buyItem': Buy the NFTs
 * Third --> 'cancelItem': Cancel a listing
 * Fourth --> 'updateListing': Update Price
 * fifth --> 'withdrawProceeds': Withdraw payment for my bought NFTs
 */

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

error NftMarketplace__PriceMustBeAboveZero();
error NftMarketplace__NotApprovedForMarketplace();
error NftMarketplace__AlreadyListed(address nftAddress, uint256 tokenId);
error Marketplace__NotOwner();
error Marketplace__NotListed(address nftAddress, uint256 tokenId);
error NftMarketplace__PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);

contract NftMarketplace is ReentrancyGuard {
    struct Listing {
        uint256 price;
        address seller;
    }

    event ItemListed(
        address indexed seller,
        address indexed nftAddress,
        uint256 indexed tokenId,
        uint256 price
    );
    event ItemBought(
        address indexed buyer,
        address indexed nftAddress,
        uint256 indexed tokenId,
        uint256 price
    );

    // NFT Contract address --> NFT TokenId --> Listing
    mapping(address => mapping(uint256 => Listing)) private s_listings;

    // Seller address --> Amount earned
    // We need to keep track of how much money this people have, how much money people has earned selling
    // their NFTs
    mapping(address => uint256) private s_proceeds;

    //////////////////
    // Modifier //
    ///////////////
    // notListed --> To check if the nft has already been listed
    modifier notListed(
        address nftAddress,
        uint256 tokenId,
        address owner
    ) {
        Listing memory listing = s_listings[nftAddress][tokenId];
        if (listing.price > 0) {
            revert NftMarketplace__AlreadyListed(nftAddress, tokenId);
        }
        _;
    }

    //isOwner --> To check if the owner of the NFT is the one listing it
    modifier isOwner(
        address nftAddress,
        uint256 tokenId,
        address spender
    ) {
        IERC721 nft = IERC721(nftAddress);
        address owner = nft.ownerOf(tokenId);
        if (spender != owner) {
            revert Marketplace__NotOwner();
        }
        _;
    }
    // isListed --> To check if the item i.e NFT is listed
    modifier isListed(address nftAddress, uint256 tokenId) {
        Listing memory listing = s_listings[nftAddress][tokenId];
        if (listing.price <= 0) {
            revert Marketplace__NotListed(nftAddress, tokenId);
        }
        _;
    }

    // constructor() {}

    /////////////////////
    // Main Function //
    ////////////////////
    function listItem(
        address nftAddress,
        uint256 tokenId,
        uint256 price
    )
        external
        notListed(nftAddress, tokenId, msg.sender)
        isOwner(nftAddress, tokenId, msg.sender)
    {
        if (price <= 0) {
            revert NftMarketplace__PriceMustBeAboveZero();
        }
        IERC721 nft = IERC721(nftAddress);
        if (nft.getApproved(tokenId) != address(this)) {
            revert NftMarketplace__NotApprovedForMarketplace();
        }
        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);
        emit ItemListed(msg.sender, nftAddress, tokenId, price);
    }

    function buyItem(
        address nftAddress,
        uint256 tokenId
    ) external payable nonReentrant isListed(nftAddress, tokenId) {
        Listing memory listedItem = s_listings[nftAddress][tokenId];
        if (msg.value < listedItem.price) {
            revert NftMarketplace__PriceNotMet(nftAddress, tokenId, listedItem.price);
        }
        s_proceeds[listedItem.seller] = s_proceeds[listedItem.seller] + msg.value;
        delete (s_listings[nftAddress][tokenId]); // Here we delete the mapping
        IERC721(nftAddress).safeTransferFrom(listedItem.seller, msg.sender, tokenId);
        emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);
    }
}


*/

